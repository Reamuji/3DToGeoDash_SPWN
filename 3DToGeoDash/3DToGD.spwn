extract obj_props
extract $

//.obj file to read
model = readfile("model/cube.obj")

// add cool glow lol
// you need to set the color by yourself though. idk why it never works
glowMode = false

//model placing offset
xOffset = 210
yOffset = 160

// for resizing the model generated
rescale = 1/2

// xyz pos of the 3D model vertices
// vertices [index].(axis)      example : vertices[4].x
let vertices = []

linebreak = readfile("linebreak.txt") //bugfixing xd    | \n didn't always work properly
blockSize  = 30

//Read vertices position

let lines = model.split(linebreak)
if lines.length == 1 {
    lines = model.split("\n")
    //lines = model.split("\r")
}
for line in lines{
    if line.starts_with("v ") {
    //  if is faster
    // .filter(i => i.starts_with("v ")) {
        let part = line.split(" ")

        let coor = {
            x:part[1] as @number,
            y:part[2] as @number,
            z:part[3] as @number,
        }
        vertices.push(coor)
    }
}
print(vertices.length)
//  3 obj that represent 3 dimension, will govern how the model rotate in 3 dimension
//  i will refer them as triaxis
xFollow = ?g
yFollow = ?g
zFollow = ?g

//create triaxis obj on level
add(
    obj{
        OBJ_ID: 1764,    
        X: 60,
        Y: 30,
        GROUPS: xFollow
    }
)
add(
    obj{
        OBJ_ID: 1764,    
        X: 30,
        Y: 60,
        GROUPS: yFollow
    }
)
add(
    obj{
        OBJ_ID: 1764,    
        X: 30,
        Y: 30,
        GROUPS: zFollow
    }
)


followCam = ?g
verticesColor = ?c

if glowMode{
    verticesColor.set(15,25,30, 0, 1, true)
    BG.set(0,0,0)
}

//  iterate through all vertices cooridinate
for coordinate in vertices{
    newGroup = ?g
    daGroup = [followCam, newGroup]

    //for convenience
    xNum = coordinate.x * rescale
    yNum = coordinate.y * rescale
    zNum = coordinate.z * rescale

    //create the ball
    add(
        obj{
            OBJ_ID: 1764,    
            X: xNum * blockSize + xOffset,
            Y: yNum * blockSize + yOffset,
            COLOR_2: verticesColor,
            GROUPS: daGroup
            //GROUPS: newGroup
        }
    )


    if glowMode{
        add(
            obj{
                OBJ_ID: 1887,    
                X: xNum * blockSize + xOffset,
                Y: yNum * blockSize + yOffset,
                COLOR_2: verticesColor,
                GROUPS: daGroup
                //GROUPS: newGroup
            }
        )
        add(
            obj{
                OBJ_ID: 1888,    
                X: xNum * blockSize + xOffset,
                Y: yNum * blockSize + yOffset,
                COLOR_2: verticesColor,
                GROUPS: daGroup,
                //GROUPS: newGroup,
            }
        )
    }
    //3 follow. for following each triaxis
    newGroup.follow(xFollow,xNum,xNum)
    newGroup.follow(yFollow,yNum,yNum)
    newGroup.follow(zFollow,zNum,zNum)
}

followCam.lock_to_player(lock_y = false, lock_x = true)

//the last thing to do is to think of some mechanism to move the triaxis



//script for rotating test
-> while_loop(() => true, () {
    xFollow.move(x = -20, y = 0, duration = 1, easing = SINE_IN_OUT)
    xFollow.move(x = 20, y = 0, duration = 1, easing = SINE_IN_OUT)
})

zFollow.move(x = -10,y = 0, duration = 0.5, easing = SINE_OUT)
-> while_loop(() => true, () {
    zFollow.move(x = 20,y = 0, duration = 1, easing = SINE_IN_OUT)
    zFollow.move(x = -20,y = 0, duration = 1, easing = SINE_IN_OUT)
})
